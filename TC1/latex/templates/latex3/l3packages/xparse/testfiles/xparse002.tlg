This is a generated file for the LaTeX (2e + expl3) validation system.
Don't change this file in any respect.
Author: Joseph Wright
============================================================
TEST 1: Basic definitions with valid arguments (types s, o m)
============================================================
(a)(b)(c)
(text)(t)(text)
(d)(e)
<<par>>
(text)(text)
()
(stuff)(f)(g)
(-NoValue-)(f)(g)
()(f)(g)
(h)(opt)(i)
(h)(opt)(i)
(h)(-NoValue-)(i)
(j)(k)(opt)
(j)(k)(not-opt)
(j)(k)(-NoValue-)
(\BooleanFalse )(-NoValue-)(l)
(\BooleanTrue )(-NoValue-)(l)
(\BooleanFalse )(opt)(m)
(\BooleanTrue )(opt)(m)
(\BooleanFalse )(-NoValue-)
(l)
(\BooleanTrue )(-NoValue-)
(l)
(\BooleanFalse )(opt)
(m)
(\BooleanTrue )(\par )
(m)
============================================================
============================================================
TEST 2: Nesting optional arguments
============================================================
(option)(text)
([option])(text)
([option])(text)
([)(text)
(])(text)
(option)(text)
([{option}])(text)
([{option}][{option}])(text)
============================================================
============================================================
TEST 3: Invalid arguments (types s, o m)
============================================================
Runaway argument?
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
[ab
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
[b
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
============================================================
============================================================
TEST 4: More variation of type with valid arguments
============================================================
(-NoValue-)(-NoValue-)(a)
(text)(-NoValue-)(b)
(text)(opt)(text)
(d)(e)(default)
(d)(e)(text)
(d)(e)(text)
(g )(h)(i)
(j)(h)(e)
()(h)(e)
============================================================
============================================================
TEST 5: Variation of type with invalid arguments
============================================================
Runaway argument?
{
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Extra }, or forgotten \endgroup.
<argument> ...\TYPE {(##1)(##2)(##3)}}\foo {\par }
                                                  bc\DeclareDocumentCommand ...
l. ...}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.
Runaway argument?
{
! Paragraph ended before \foo  was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! Extra }, or forgotten \endgroup.
<argument> ...YPE {(##1)(##2)(##3)}}\foo de{\par }
                                                  \DeclareDocumentCommand \f...
l. ...}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.
Runaway argument?
g hi
! Paragraph ended before \foo (arg 1) was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
Runaway argument?
j
! Paragraph ended before \foo (arg 1) was complete.
<to be read again> 
                   \par 
l. ...}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
============================================================
============================================================
TEST 6: Optional argument tests
============================================================
TRUE
FALSE
FALSE
FALSE
FALSE
FALSE
TRUE
FALSE
FALSE
TRUE
TRUE
============================================================
============================================================
TEST 7: Trailing optional arguments
============================================================
FALSE
TRUE
TRUE
FALSE
TRUE
FALSE
FALSE FALSE
TRUE FALSE
TRUE TRUE
TRUE TRUE
FALSE TRUE
FALSE FALSE
TRUE FALSE
TRUE TRUE
TRUE FALSE
TRUE FALSE
TRUE TRUE
TRUE FALSE
FALSE
TRUE
TRUE
FALSE
TRUE
TRUE
FALSE
TRUE
TRUE
FALSE
TRUE
FALSE
============================================================
============================================================
TEST 8: Awkward `NoValue' checks (expect T/F/F/F/F)
============================================================
TRUE
FALSE
FALSE
FALSE
FALSE
============================================================
============================================================
TEST 9: Nested optional arguments
============================================================
> -NoValue-.
<recently read> }
l. ...}
> bar.
<recently read> }
l. ...}
> ].
<recently read> }
l. ...}
> [.
<recently read> }
l. ...}
> [].
<recently read> }
l. ...}
> [bar].
<recently read> }
l. ...}
> [bar][baz].
<recently read> }
l. ...}
> [][][][][]{]}.
<recently read> }
l. ...}
> {a}[{b}[{c}]{d}[{e}]{f}]{g}[{h}]{i}.
<recently read> }
l. ...}
============================================================
============================================================
TEST 10: Processing arguments
============================================================
1,2
-
3,-NoValue-
1,2
0,0
3,-NoValue-
============================================================
============================================================
TEST 11: Optional argument tests expand (expect T/F/F/F/T)
============================================================
> \test=TRUE.
<recently read> }
l. ...}
> \test=FALSE.
<recently read> }
l. ...}
> \test=FALSE.
<recently read> }
l. ...}
> \test=FALSE.
<recently read> }
l. ...}
> \test=TRUE.
<recently read> }
l. ...}
============================================================
============================================================
TEST 12: Fully expandable functions
============================================================
(a)(b)
(-NoValue-)(c)
(\BooleanFalse )(a)(b)
(\BooleanFalse )(-NoValue-)(c)
(\BooleanTrue )(a)(b)
(\BooleanTrue )(-NoValue-)(c)
(-NoValue-)(b)(-NoValue-)(d)
(-NoValue-)(b)(-NoValue-)(d)
(a)(b)(-NoValue-)(d)
(-NoValue-)(b)(c)(d)
(a)(b)(c)(d)
============================================================
============================================================
TEST 13: Fully expandable long functions
============================================================
(\par )(b)
(-NoValue-)(\par )
(\BooleanFalse )(\par )(b)
(\BooleanFalse )(-NoValue-)(\par )
(\BooleanTrue )(\par )(b)
(\BooleanTrue )(-NoValue-)(\par )
(-NoValue-)(\par )(-NoValue-)(d)
(-NoValue-)(b)(-NoValue-)(\par )
(\par )(b)(-NoValue-)(d)
(-NoValue-)(b)(\par )(d)
(\par )(\par )(\par )(\par )
============================================================
============================================================
TEST 14: More tricky expandable tests
============================================================
()(b)
()(b)
( )(b)
( )(b)
(a)(b)
( a)(b)
(a )(b)
({}{})(b)
({a}{a})(b)
( {})(b)
({} )(b)
({}[])(b)
([])(b)
([{}])(b)
([{a}])(b)
([][])(b)
({}[][])(b)
()(b)
()(b)
( )(b)
( )(b)
(a)(b)
( a)(b)
(a )(b)
({}{})(b)
({a}{a})(b)
( {})(b)
({} )(b)
============================================================
